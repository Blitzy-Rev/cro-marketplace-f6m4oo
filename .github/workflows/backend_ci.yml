name: Backend CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend_ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/backend/**'

env:
  WORKING_DIRECTORY: src/backend
  PYTHON_VERSION: '3.10'

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/requirements.txt'
      
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pip install tox tox-gh-actions
      
      - name: Run linting
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: tox -e lint
      
      - name: Run type checking
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: tox -e type
      
      - name: Run tests with coverage
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: tox -e coverage
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ${{ env.WORKING_DIRECTORY }}/htmlcov

  security_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: pip install bandit safety sarif-tools git-secrets
      
      - name: Run bandit
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: bandit -r app -f sarif -o bandit-results.sarif || true
      
      - name: Run safety check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: safety check -r requirements.txt --json > safety-results.json || true
      
      - name: Run git-secrets
        run: git-secrets --register-aws && git-secrets --scan
      
      - name: Upload bandit SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ env.WORKING_DIRECTORY }}/bandit-results.sarif
          category: bandit

  build_docker:
    needs: [lint_and_test, security_scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_REGISTRY }}/molecule-flow/backend
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/molecule-flow/backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/molecule-flow/backend:buildcache,mode=max
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_REGISTRY }}/molecule-flow/backend:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif
          category: trivy